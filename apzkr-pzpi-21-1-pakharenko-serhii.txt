Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії

КУРСОВА РОБОТА 
ПОЯСНЮВАЛЬНА ЗАПИСКА
з дисципліни «Архітектура програмного забезпечення»
Тема роботи: «Програмна система для автоматизації видачі необхідного обладнання для охоронних підприємств»

Виконав: 	
ст. гр. ПЗПІ-21-1                                                                              Пахаренко С. О.

Керівник: 
доц. каф. ПІ         	        Лещинський В. О.

Робота захищена на оцінку                                              	        _______________

Комісія:
доц. каф. ПІ	         	Лещинський В. О.
доц. каф. ПІ	        	  Лещинська І. О.
ст. викл. каф. ПІ    		     Сокорчук І. П.


	Харків 2024
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук         Кафедра програмної інженерії	      
Спеціальність 121 – Інженерія програмного забезпечення	
Курс           3		 Семестр  			            6			____        
Навчальна дисципліна Архітектура програмного забезпечення	

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТА
Пахаренку Сергію Олеговичу
1.	Тема роботи: «Програмна система для автоматизації видачі необхідного обладнання для охоронних підприємств»	
2.	Термін узгодження завдання курсової роботи «1» квітня 2024 р.
3.	Термін здачі студентом закінченої роботи «24» червня 2024 р.
4.	Вихідні дані до проекту (роботи): В програмній системі передбачити:
реалізація двох компонентів (Back-end, IoT), унікальність, можливість заробітку, актуальність, розповсюдженість, масштабованість, локалізація, забезпечення конфіденційності та адміністрування системи	
5.	Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проєктування програмного проєкту, структура бази даних, розробка програмного проєкту, опис розробленої програмної системи, висновки, перелік посилань, додатки	
6.	Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) Deployment Diagram, Use Case Diagram, Entity-Relationship Model, Interaction Overview Diagram,  Activity Diagram, State Diagram, Component Diagram, Package Diagram	
КАЛЕНДАРНИЙ ПЛАН

Номер	Назва етапів курсової роботи	Строк виконання етапів роботи	Примітки
1	Функціональна специфікація
програмного проєкту	31.03.24	
2	Проєктування програмного
проєкту	30.04.24	
3	Кодування програмного проєкту	20.05.24	
4	Оформлення пояснювальної
записки	31.05.24	
5	Захист курсової роботи	08.06.24	

Дата видачі завдання «1» квітня 2024 р.
Керівник	_________________ доц. Лещинський В.О.
(підпис)
Завдання прийняв до виконання
ст. гр. ПЗПІ-21-1	            Пахаренко С. О.
(підпис)


 
РЕФЕРАТ

	Пояснювальна записка до курсової роботи: 67 с., 29 рис., 3 табл. 3 додатки, 5 джерел.
	АДМІНІСТРАТОР, ЗАХИСТ, ІНВЕНТАР, КЛІЄНТ, КОРИСТУВАЧ, ОБЛАДНАННЯ, ОХОРОНА, ОХОРОНЕЦЬ, ПРОГРАМНА СИСТЕМА, РІЧ, РОБІТНИК.
	Об’єктом дослідження є галузь керування інвентарем охоронних підприємств, а саме створення програмної системи для автоматизації видачі необхідного обладнання для охоронних підприємств з використанням технологій IoT.
	Метою створення курсової роботи є розробка програмної системи, що надає можливість налаштовувати та автоматизовувати видачу необхідного обладнання для охоронних підприємств. Дана програмна система надасть можливість користувачам робити перегляд даних про користувачів, а також про інвентар. Вона надасть можливість слідкувати за обладнанням користувачів, що зробить роботу охоронних підприємств більш організованою.
Використання технології ASP.NET Web API і мови програмування C# разом із ядром бази даних PostgreSQL формують основу методів розробки, які також передбачають плавну інтеграцію пристроїв IoT у програмне забезпечення.
У результаті роботи було розроблену програмну систему для автоматизації видачі необхідного обладнання для охоронних підприємств. Програмна система складається з серверної частини для обробки даних та серверу для інтеграції з IoT-пристроями. 
ЗМІСТ
	

Вступ	8
1 Аналіз предметної області	10
    1.1 Бізнес-вимоги	10
        1.1.1 Бізнес-можливості	10
        1.1.2 Бізнес-цілі та критерії успіху	11
        1.1.3 Потреби клієнтів або ринку	13
        1.1.4 Бізнес-ризики	14
    1.2 Концепція рішення	16
        1.2.1 Окреслення концепції	16
        1.2.2 Головна функціональність	18
        1.2.3 Припущення та залежності	18
    1.3 Рамки та обмеження проєкту	20
        1.3.1 Рамки первинного випуску	21
        1.3.2 Рамки наступних випусків	21
        1.3.3 Обмеження та винятки	22
    1.4 Бізнес-контекст	24
        1.4.1 Профілі зацікавлених сторін	24
        1.4.2 Пріоритети проєкту	25
        1.4.3 Робоче середовище	26
2 Постановка задачі	28
3 Проєктування бази даних	30
    3.1 Побудова ER-діаграми	30
4 Архітектура програмної системи	32
    4.1 Архітектура серверної частини	32
    4.2 Архітектура IoT частини	38
    4.3 Специфікація REST	40
5 Опис програмної системи	43
    5.1 Виклик і завантаження	43
    5.2 Призначення і логічна структура	46
    5.3 Опис програмної реалізації	47
Висновки	58
Перелік джерел посилання	59
Додаток А Результат перевірки на плагіат	60
Додаток Б Програмний код серверної частини	61
Додаток В Програмний код IoT пристрою	66

 
ВСТУП


Сучасна сфера охорони об'єктів стає дедалі складнішою, що вимагає інноваційних рішень для забезпечення надійного захисту. Традиційні методи управління обладнанням охоронних підприємств часто виявляються недостатньо ефективними, особливо враховуючи зростаючі потреби та динаміку погроз безпеці. Саме в цьому контексті виникає необхідність у розробці та впровадженні інноваційних систем автоматизації процесів видачі та обліку обладнання.
Наша система "Guardic" вирішує ці проблеми за допомогою передової програмної платформи, що використовує найсучасніші технології для оптимізації процесів управління обладнанням охоронних підприємств. Завдяки інтеграції з IoT-пристроями та системам аналізу даних, "Guardic" дозволяє автоматизувати рутинні завдання, мінімізувати людський фактор та забезпечити чіткий контроль за всіма етапами видачі та обліку обладнання. 
Цей продукт є значним кроком вперед в інноваціях сфери охорони, пропонуючи охоронним підприємствам ряд ключових переваг:
–	Підвищення ефективності: Автоматизація рутинних завдань звільняє час співробітників для більш важливих функцій, таких як моніторинг безпеки та надання кращого обслуговування клієнтам.
–	Зниження помилок: Система "Guardic" мінімізує ризик людських помилок, забезпечуючи точність та надійність у процесах видачі та обліку обладнання.
–	Покращення контролю: Програмна платформа забезпечує чіткий контроль за всіма етапами видачі та обліку обладнання, дозволяючи керівництву охоронних підприємств отримувати детальну аналітику та приймати обґрунтовані рішення.
–	Економія ресурсів: Автоматизація процесів економить час та ресурси, що призводить до зниження витрат та підвищення рентабельності охоронних підприємств.
Система "Guardic" – це інноваційне рішення, яке допоможе охоронним підприємствам оптимізувати процеси управління обладнанням, підвищити ефективність роботи та забезпечити надійний захист об'єктів.
 
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес-можливості


На ринку існує ряд програмних систем, які пропонують схожі функції, що й система «Guardic». Деякі з найвідоміших аналогів включають:
– Honeywell Security: Ця компанія пропонує комплексну систему управління охороною, яка включає в себе функції автоматизації видачі обладнання. Система Honeywell Security може бути інтегрована з різними типами обладнання та датчиків, забезпечуючи централізований контроль над безпекою об'єкта. Однак, система Honeywell Security може бути дорогою та складною у впровадженні.
– Genetec Security: Ця компанія пропонує програмне забезпечення для управління відеоспостереженням, яке може бути інтегровано з системою видачі обладнання «Guardic». Це дозволяє охоронцям відстежувати видачу та повернення обладнання, а також переглядати відеозаписи з камер спостереження. Однак, програмне забезпечення Genetec Security може бути дорогим та потребувати значних ресурсів для зберігання даних.
– IDEMIA: Ця компанія пропонує рішення для контролю доступу, які можуть бути інтегровані з системою «Guardic». Це дозволяє охоронцям отримувати доступ до обладнання за допомогою RFID-карток або біометричних датчиків. Однак, рішення IDEMIA можуть бути дорогими та потребувати спеціального обладнання.
Програмна система «Guardic» є інноваційним та доступним рішенням, яке дозволить охоронним підприємствам значно оптимізувати процес видачі та обліку обладнання. Система «Guardic» проста у використанні, гнучка, доступна та може бути інтегрована з іншими програмними комплексами. Це робить її ідеальним вибором для охоронних підприємств, які прагнуть підвищити свою ефективність та безпеку.


1.1.2	Бізнес-цілі та критерії успіху


Покращення ефективності роботи охоронних підприємств:
БЦ-1.1: Автоматизація процесу видачі та обліку обладнання, що призведе до значного скорочення часу та ресурсів, необхідних для цих завдань.
БЦ-1.2: Зниження ризику втрати або крадіжки обладнання завдяки впровадженню системи контролю доступу та моніторингу.
КУ-1.1: Скорочення часу видачі обладнання охоронцям на 50%.
КУ-1.2: Зниження витрат на облік та розподіл обладнання на 30%.
КУ-1.3: Зменшення кількості випадків втрати або крадіжки обладнання на 90%.
Підвищення рівня безпеки та мобільності охоронців:
БЦ-2.1: Забезпечення швидкого та зручного доступу охоронців до необхідного їм обладнання в будь-який час.
БЦ-2.2: Збільшення мобільності охоронців за рахунок зменшення навантаження, пов'язаного з транспортуванням та зберіганням обладнання.
БЦ-2.3: Покращення якості роботи охоронців завдяки наявності необхідного їм обладнання в потрібний час.
КУ-2.1: Досягнення 95% задоволеності охоронців роботою системи.
КУ-2.2: Збільшення на 10% кількості завдань, виконаних охоронцями за рахунок їхньої кращої мобільності.
КУ-2.3: Зниження кількості інцидентів, пов'язаних з відсутністю у охоронців необхідного обладнання.
Розширення ринку та підвищення конкурентоспроможності охоронних підприємств:
БЦ-3.1: Запропонувати охоронним підприємствам інноваційне та доступне рішення для оптимізації процесу видачі та обліку обладнання.
БЦ-3.2: Створити позитивний імідж охоронного підприємства, яке використовує сучасні технології для покращення роботи своїх співробітників.
БЦ-3.3: Збільшити частку ринку охоронних послуг за рахунок кращої ефективності та надійності роботи.
КУ-3.1: Збільшення кількості клієнтів, які використовують систему "Guardic", на 20% протягом 3 місяців.
КУ-3.2: Підвищення рівня впізнаваності бренду "Guardic" на 15% протягом 6 місяців.
КУ-3.3: Збільшення частки ринку охоронних послуг на 5% протягом року.
Виконання цих цілей та досягнення критеріїв успіху гарантує, що система "Guardic" стане цінним інструментом для охоронних підприємств, які прагнуть оптимізувати свою роботу, покращити рівень безпеки та мобільності своїх співробітників та розширити свою частку ринку.
1.1.3 Потреби клієнтів або ринку


Програмна система "Guardic" розроблена для вирішення низки ключових проблем та задоволення потреб охоронних підприємств. Ці потреби було визначено в ході ретельного дослідження ринку та спілкування з потенційними користувачами:
П-1: Неефективність процесів видачі та обліку обладнання:
–	Охоронні підприємства стикаються з труднощами у відстеженні наявності, розташування та стану обладнання, що призводить до втрат часу, ресурсів та неефективного управління.
–	Існуючі методи, такі як ручний облік та паперові записи, є схильними до помилок та не забезпечують чіткої візуалізації інформації.
П-2: Ризики втрати або крадіжки обладнання:
–	Втрата або крадіжка обладнання може призвести до значних фінансових втрат, шкоди репутації та порушення операційної діяльності охоронного підприємства.
–	Відсутність надійної системи контролю доступу та моніторингу робить обладнання вразливим.
П-3: Необхідність у мобільних та гнучких рішеннях:
–	Охоронцям потрібно мати доступ до необхідного їм обладнання в будь-який час та в будь-якому місці, що ускладнюється традиційними методами зберігання та транспортування.
–	Рішення повинні бути гнучкими та адаптуватися до мінливих потреб охоронних підприємств та об'єктів, які вони охороняють.
П-4: Покращення рівня безпеки та підзвітності:
–	Охоронні підприємства прагнуть підвищити рівень безпеки своїх співробітників та об'єктів, які вони охороняють.
–	Система повинна забезпечувати чітку фіксацію видачі та використання обладнання, що сприяє кращій підзвітності.
П-5: Оптимізація витрат та підвищення конкурентоспроможності:
–	Охоронні підприємства шукають шляхи скорочення витрат та підвищення ефективності своєї роботи.
–	Впровадження системи "Guardic" може призвести до значної економії коштів за рахунок оптимізації процесів, зниження ризиків втрати обладнання та покращення загальної продуктивності.
Система "Guardic" орієнтована на те, щоб допомогти охоронним підприємствам вирішити ці проблеми та покращити свою роботу в цілому. Завдяки своїм інноваційним можливостям, простоті використання та доступності, "Guardic" стає цінним інструментом для охоронних підприємств будь-якого розміру.


1.1.4 Бізнес-ризики


Незважаючи на значний потенціал, система "Guardic", як і будь-який новий продукт, стикається з певними бізнес-ризиками, які слід враховувати:
Конкуренція: на ринку вже існують програмні рішення для автоматизації процесів видачі та обліку обладнання. Існує ризик, що конкуренти можуть запропонувати схожі або більш вигідні рішення, що може призвести до втрати частки ринку.
Дії для мінімізації ризику:
–	розробка унікальної пропозиції продажу (USP), яка чітко підкреслює переваги та інноваційні можливості системи "Guardic" порівняно з аналогами. 
–	активна маркетингова діяльність, спрямована на донесення USP до цільової аудиторії.
–	співпраця з ключовими гравцями ринку охоронних послуг для просування системи "Guardic".
Технічні проблеми: Несправності обладнання, програмні помилки або збої в роботі системи можуть призвести до неточної видачі обладнання, порушення обліку та інших проблем. Це може негативно вплинути на імідж компанії та задоволеність клієнтів.
Дії для мінімізації ризику:
–	використання високоякісних датчиків, компонентів та програмного забезпечення від надійних постачальників.
–	проведення ретельних тестів та перевірок системи на всіх етапах розробки.
–	забезпечення надійної системи резервного копіювання та відновлення даних.
–	надання оперативної технічної підтримки клієнтам.
Зміни в законодавстві: Зміни в законодавстві, що регулюють діяльність охоронних підприємств, можуть призвести до необхідності внесення істотних змін до системи "Guardic", що потребуватиме додаткових витрат і часу.
Дії для мінімізації ризику:
–	постійний моніторинг змін в законодавстві, що стосується охоронної діяльності.
–	співпраця з юристами та експертами для оцінки впливу законодавчих змін на систему "Guardic".
–	забезпечення гнучкості та масштабованості системи, що дозволяє їй адаптуватися до нових вимог.


1.2 Концепція рішення
1.2.1 Окреселення концепції


Система "Guardic" пропонує інноваційне програмне рішення для автоматизації процесів видачі та обліку обладнання на охоронних підприємствах. Її мета - трансформувати підхід до управління обладнанням, роблячи його більш ефективним, прозорим та безпечним.
Основні принципи роботи системи:
Централізоване управління: Система "Guardic" створює єдиний інформаційний простір, де зберігається вся інформація про обладнання, включаючи його опис, місцезнаходження, статус та історію видачі. Це дозволяє охоронним підприємствам чітко візуалізувати картину наявності та використання обладнання в будь-який час.
Автоматизація процесів: Система автоматизує рутинні завдання, пов'язані з видачею та обліком обладнання, такі як бронювання, реєстрація видачі, оновлення статусу, контроль термінів повернення. Це економить час персоналу, зменшує ризик помилок та звільняє ресурси для виконання більш важливих завдань.
Контроль доступу: Система "Guardic" забезпечує чіткий контроль доступу до обладнання. Користувачі отримують доступ лише до того обладнання, яке їм дійсно необхідне, для виконання своїх завдань. Це мінімізує ризик втрати, крадіжки або несанкціонованого використання обладнання.
Відстеження та аналітика: Система генерує детальну аналітику щодо використання обладнання. Ці дані можуть бути використані для оптимізації процесів, виявлення проблемних зон, кращого планування потреб в обладнанні та прийняття обґрунтованих управлінських рішень.
Очікувані результати від впровадження системи "Guardic":
Зниження витрат: Завдяки автоматизації процесів, кращому контролю доступу та оптимізації використання обладнання, система "Guardic" може допомогти охоронним підприємствам значно скоротити витрати.
Підвищення ефективності: Система "Guardic" робить роботу з обладнанням більш чіткою, прозорою та організованою. Це призводить до підвищення загальної ефективності роботи охоронних підприємств.
Покращення безпеки: Система "Guardic" мінімізує ризики втрати, крадіжки або несанкціонованого використання обладнання, що робить роботу охоронних підприємств більш безпечною.
Підвищення мобільності: Завдяки доступності інформації про обладнання в будь-який час та в будь-якому місці, система "Guardic" робить роботу охоронців більш мобільною та гнучкою.
Система "Guardic" розроблена з урахуванням потреб та побажань охоронних підприємств. Її впровадження може призвести до значного покращення ефективності роботи, безпеки та мобільності, а також до зниження витрат та підвищення рівня задоволеності персоналу.
1.2.2 Головна функціональність 


MF-1: Реєстрація та авторизація користувачів: Створення облікових записів для охоронців та менеджерів, авторизація для доступу до системи.
MF-2: Централізований каталог обладнання: Зберігання інформації про все обладнання, що використовується охоронним підприємством.
MF-3: Автоматизована система видачі: Бронювання, отримання, повернення та оновлення статусу обладнання за допомогою мобільного додатку або веб-інтерфейсу.
MF-4: Контроль доступу: Надання доступу до обладнання лише тим користувачам, яким воно дійсно необхідне.
MF-5: Відстеження та аналітика: Збір даних про використання обладнання для оптимізації процесів та прийняття управлінських рішень.
MF-6: Інтеграція з іншими системами: Підключення до систем відеоспостереження, систем управління доступом, систем GPS-навігації тощо.
MF-7: Зручний інтерфейс: Простий у використанні інтерфейс для охоронців та менеджерів.
MF-8: Технічна підтримка доступна цілодобово для вирішення всіх технічних питань та надання порад щодо користування системою.


1.2.3 Припущення та залежності


Система "Guardic" ґрунтується на певних припущеннях та залежностях, які важливо враховувати при її розробці та впровадженні.
Припущення:
Наявність централізованого каталогу обладнання: Для ефективної роботи системи "Guardic" необхідний централізований каталог, де буде зберігатися інформація про все обладнання, що використовується охоронним підприємством. Цей каталог буде містити опис обладнання, його характеристики, фотографії, історію видачі та місцезнаходження в режимі реального часу.
Стабільний доступ до Інтернету: Для передачі даних про видачу та повернення обладнання, а також для доступу до каталогу та аналітики, необхідний стабільний доступ до Інтернету з достатньою пропускною здатністю.
Готовність персоналу до змін: Впровадження системи "Guardic" може потребувати деяких змін у робочих процесах охоронного підприємства. Персонал повинен бути готовим до цих змін та пройти необхідне навчання для роботи з системою.
Залежності:
Якість та надійність обладнання: Ефективність роботи системи "Guardic" безпосередньо залежить від якості та надійності обладнання, що використовується охоронним підприємством. Необхідно ретельно відбирати постачальників обладнання та проводити регулярні перевірки його працездатності.
Стійкість мобільних мереж та Інтернету: Передача даних про видачу та повернення обладнання, а також доступ до каталогу та аналітики залежать від стійкості мобільних мереж та доступу до Інтернету. Необхідно мати резервні канали зв'язку та плани дій на випадок збоїв або перебоїв у роботі мереж.
Захист даних: Система "Guardic" повинна відповідати суворим вимогам щодо конфіденційності та безпеки даних. Необхідно впровадити комплексні заходи безпеки, такі як шифрування даних, контроль доступу, протоколи резервного копіювання та відновлення, а також регулярні аудити та тестування системи на предмет вразливостей.


1.3 Рамки та обмеження проєкту
1.3.1 Рамки первинного випуску


Веб-інтерфейс:
–	Реєстрація та авторизація: Користувачі (охоронці, менеджери) зможуть створювати облікові записи та входити до системи за допомогою веб-інтерфейсу.
–	Централізований каталог обладнання: Користувачі зможуть переглядати інформацію про все обладнання, доступне в системі, включаючи опис, характеристики, фотографії, історію видачі та місцезнаходження в режимі реального часу.
–	Автоматизована система видачі: Користувачі зможуть бронювати, отримувати, повертати та оновлювати статус обладнання за допомогою веб-інтерфейсу.
–	Контроль доступу: Система буде надавати доступ до обладнання лише тим користувачам, яким воно дійсно необхідне.
–	Відстеження та аналітика: Система буде генерувати дані про використання обладнання, які можна використовувати для оптимізації процесів, виявлення проблемних зон та прийняття обґрунтованих управлінських рішень.
Мобільний додаток:
–	Реєстрація та авторизація: Користувачі зможуть створювати облікові записи та входити до системи за допомогою мобільного додатку.
–	Обмежений доступ до каталогу обладнання: Користувачі зможуть переглядати основну інформацію про обладнання, таке як опис, характеристики та фотографії.
–	Функціональність мобільного додатку буде розширена в наступних етапах випуску.


1.3.2 Рамки наступних випусків


Веб-інтерфейс:
Розширення функціональності мобільного додатку:
–	Додавання можливості бронювання, отримання та повернення обладнання за допомогою мобільного додатку.
–	Надання користувачам мобільного додатку доступу до детальної інформації про обладнання, включаючи історію видачі та місцезнаходження в режимі реального часу.
–	Реалізація функціональності для відстеження обладнання в режимі реального часу за допомогою GPS-технологій.
–	Впровадження системи push-оповіщень про втрату або крадіжку обладнання.
Інтеграція з іншими системами:
–	Розробка модулів для інтеграції з системами відеоспостереження, що використовуються охоронними підприємствами.
–	Створення інтерфейсів для обміну даними з системами управління доступом та GPS-навігації.
–	Забезпечення можливості синхронізації даних про обладнання з іншими системами, що використовуються охоронним підприємством.
Користувачам буде надано допомогу з технічними питаннями, а також поради щодо використання системи. Служба технічної підтримки допоможе користувачам у разі виникнення.


1.3.3 Обмеження та винятки


Незважаючи на те, що система "Guardic" покликана полегшити та оптимізувати процес видачі обладнання для охоронних підприємств, важливо усвідомлювати певні обмеження та виключення, пов'язані з її роботою:
Технічні обмеження:
–	Залежність від надійності обладнання: Ефективність роботи системи "Guardic" безпосередньо залежить від надійності та працездатності використовуваного обладнання, включаючи датчики, мобільні пристрої, комп'ютери та мережеве обладнання. Несправності або збої в роботі обладнання можуть призвести до перебоїв у роботі системи, втрати даних та інших проблем.
–	Обмеження пропускної здатності мережі: Швидкість та надійність роботи системи "Guardic" може залежати від пропускної здатності мережі, до якої вона підключена. Недостатня пропускна здатність може призвести до уповільнення роботи системи, затримок у передачі даних та інших проблем.
–	Можливі кібератаки: Як і будь-яка система, що працює в Інтернеті, система "Guardic" може бути вразливою до кібератак. Хакерські атаки можуть призвести до крадіжки даних, пошкодження системи або її несанкціонованого використання.
Обмеження, пов'язані з людським фактором:
–	Неправильне використання системи: Недбале або неправильне використання системи користувачами може призвести до помилок, втрати даних та інших проблем. Важливо, щоб усі користувачі системи були навчені та розуміли правила її роботи.
–	Несвоєчасне реагування на сповіщення: Система "Guardic" може генерувати сповіщення про важливі події, такі як втрата обладнання або несанкціонований доступ. Несвоєчасне реагування на такі сповіщення може призвести до негативних наслідків.
Виключення:
–	Система "Guardic" не призначена для заміни кваліфікованого охоронного персоналу. Вона є лише інструментом, який може допомогти в автоматизації певних процесів та надати корисні дані для прийняття рішень.
–	Система "Guardic" не може гарантувати абсолютну безпеку. Її використання не звільняє охоронні підприємства від відповідальності за вжиття всіх необхідних заходів безпеки.
–	Система "Guardic" буде постійно розвиватись та вдосконалюватись. Її функціональні можливості та можливості можуть змінюватися з часом.
Важливо ретельно вивчити та зрозуміти даний перелік обмежень та виключень перед використанням системи "Guardic".


1.4 Бізнес-контекст
1.4.1 Профілі зацікавлених сторін


	У таблиці 1.1 було зображено та описано профілі зацікавлених сторін.
Таблиця 1 – Профілі зацікавлених сторін проекту

Зацікавлена сторона	Головна
цінність	
Ставлення	
Головний інтерес	
Обмеження
Керівництво охоронного підприємства	Ефективність, безпека, економія	Позитивне, очікує результатів	Отримати систему, яка відповідає цілям, бюджету	Не володіє глибокими технічними знаннями
Менеджери охоронного підприємства	Ефективність, простота використання, інформативність	Позитивне, зацікавлені в успішному впровадженні	Отримати систему, яка економить час, мінімізує бюрократію, полегшує роботу	Можуть мати опір змінам, потребують чіткої інструкції
Охоронці	Зручність, швидкість, чітка інструкція	Позитивне, хочуть отримати корисний інструмент	Отримати систему, яка економить час, полегшує роботу	Можуть мати обмежені IT-навички, потребують навчання
Інвестори	Безпека, надійність, мінімальні збої	Позитивне, хочуть забезпечити безперебійну роботу	Отримати систему, яка відповідає стандартам, має чітку документацію	Можуть мати обмежений доступ до ресурсів


1.4.2 Пріорітети проєкту

	У таблиці 1.2 було зображено та описано пріорітети проєкту.
Таблиця 1.2 – Пріоритети проекту
Показник	Виконання (етапи)	Обмеження
(граничні значення)	Ступінь свободи
(допустимий діапазон)

Розклад та план робіт		Продукт має бути розробленим приблизно до 10.06.2024	Можливе відхилення від графіку на 1–3  місяці
Функціональність			Весь базовий функціонал має працювати під час релізу 1.0
Ціна		Приблизно 35.000 гривень	Допу стиме відхилення на 20%
Персонал		Розмір команди: 1 розробник	
Якість			100% всіх наявних данних повинні бути вірними 


1.4.3 Робоче середовище

Щоб створити безперебійне робоче середовище для користувачів у різних країнах, безперервний доступ є надзвичайно важливим для системи програмного забезпечення.
Серверний компонент буде розроблено з використанням надійної, безпечної та швидкої мови програмування C# [1]. Окрім того, програма використовуватиме технологію ASP.NET [2] Web API для забезпечення оптимальної ефективності та швидкості.
Використання ядра PostgreSQL [3] як обраного рішення для баз даних пропонує численні переваги, включаючи виняткову швидкість, надійність, можливості шифрування даних і відповідність нормам GDPR. Взаємодія з базою даних буде полегшена завдяки використанню бібліотеки Entity Framework Core, потужного інструменту ORM.
Використовуючи мову програмування C# і технологію AoT, ми застосуємо їхні можливості для розробки пристрою IoT.
Щоб гарантувати максимальну безпеку, передача даних буде захищена за допомогою використання протоколу HTTPS, який включає шифрування. Крім того, впровадження JWT як засобу авторизації та автентифікації ще більше посилить застосовувані захисні заходи. Для додаткової безпеки зберігання паролів буде використано модифікатор під назвою «Сіль».
 
2	ПОСТАНОВКА ЗАДАЧІ

Згідно з аналізом предметної області, завданням даного проекту є розробка програмної системи "Guardic" для автоматизації процесу управління обладнанням для охоронних підприємств.
Система "Guardic" повинна виконувати наступні функції:
Для всіх користувачів:
Реєстрація та вхід в систему: Користувачі повинні мати можливість створювати облікові записи та входити в систему, використовуючи свої логіни та паролі.
Зміна пароля: Користувачі повинні мати можливість змінювати свої паролі.
Відновлення пароля: Користувачі повинні мати можливість відновлювати свої паролі у випадку їх забуття.
Для охоронців:
Перегляд доступного обладнання: Охоронці повинні мати можливість переглядати список доступного обладнання, включаючи його тип, опис та інші деталі.
Запит на видачу обладнання: Охоронці повинні мати можливість подавати запити на видачу їм необхідного обладнання.
Отримання обладнання: Охоронці повинні мати можливість отримувати видане їм обладнання, підтверджуючи його отримання в системі.
Повернення обладнання: Охоронці повинні мати можливість повертати обладнання, яке вони більше не використовують.
Перегляд історії видачі та повернення обладнання: Охоронці повинні мати можливість переглядати історію видачі та повернення обладнання, щоб відстежувати свою роботу.
Для адміністраторів:
Вхід в систему: Адміністратори повинні мати можливість входити в систему, використовуючи свої логіни та паролі.
Створення та редагування користувачів: Адміністратори повинні мати можливість створювати нових користувачів, редагувати інформацію про існуючих користувачів та видаляти користувачів.
Створення та редагування обладнання: Адміністратори повинні мати можливість створювати нові типи обладнання, редагувати інформацію про існуюче обладнання та видаляти типи обладнання.
Налаштування системи: Адміністратори повинні мати можливість налаштовувати параметри системи, такі як права доступу користувачів, правила видачі обладнання та звітність.
Локалізація та інтернаціоналізація: Система повинна підтримувати локалізацію та інтернаціоналізацію, щоб її можна було використовувати в різних країнах з різними мовами та культурами.
 
3	ПРОЄКТУВАННЯ БАЗИ ДАНИХ
3.1 Побудова ER-діаграми


Задля проектування бази даних заздалегідь було розроблено ER-діаграму (див. рис. 3.1). Діаграма складається з 7 таблиць: призначення речей (Assignments), охоронці (Guards), користувачі (Users), сповіщення (Notifications), розпорядження (Orders), логи розпоряджень (OrderLogs), речі для видачі (Things).
 
Рисунок 3.1 – ER-діаграма проєкту
Дана база даних містить такі зв’язки між сутностями:
	Користувач – Призначення речей (1:М, один користувач може мати багато призначень речей);
	Охоронець – Призначення речей (1:М, один охоронець може мати багато призначень речей);
	Охоронець – Повідомлення (1:М, один охоронець може мати багато повідомлень).
	Користувач – Розпорядження (M:М, багато користувачів може мати багато розпоряджень);
	Розпорядження – Річ (1:М, одне розпорядження може мати багато речей);
	Розпорядження – Призначення речей (1:М, одне розпорядження може мати багато призначень речей);

Для програмної системи було обрано СКБД DataGrip та базу даних PostgreSQL. Задля підключення до бази даних було визначено та записано строку для під’єднання до бази даних, яку містить файл appsettings.json.
 
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура серверної частини


Діаграма прецедентів системи "Guardic" описує типові сценарії використання системи та взаємодії між її користувачами. На діаграмі представлені наступні елементи:
Актори:
–	Користувач: це може бути охоронець (адміністратор) або користувач системи.
–	IoT-пристрій: це може бути датчик, GPS-трекер або інший пристрій, який збирає дані про обладнання.
Прецеденти:
–	Авторизація та видача призначень речей від приладом: Цей прецедент описує процес авторизації користувача, отримання ним призначень на використання обладнання та отримання цього обладнання за допомогою IoT-пристрою.
–	Додавання та перегляд обладнання та речей охоронцем: Цей прецедент описує процес додавання нового обладнання та речей до системи, а також перегляду списку наявного обладнання та речей охоронцем.
–	Реєстрація і авторизація користувача: Цей прецедент описує процес реєстрації нового користувача в системі та його авторизації для доступу до її функціоналу.
–	Додавання та перегляд призначень речей: Цей прецедент описує процес додавання нових призначень на використання обладнання та речей, а також перегляду списку призначень користувачем.
–	Зміна призначень речей користувачем: Цей прецедент описує процес зміни користувачем призначень на використання обладнання та речей.
–	Видалення призначень речей користувачем: Цей прецедент описує процес видалення користувачем призначень на використання обладнання та речей.
–	Перегляд даних про речі та призначення речей: Цей прецедент описує процес перегляду користувачем інформації про обладнання та речі, а також про призначення на їх використання.
–	Захист персональних даних: Цей прецедент описує заходи, які вживаються системою для захисту персональних даних користувачів.
Зв'язки:
–	Асоціації: Асоціації використовуються для зв'язку акторів з прецедентами. Наприклад, користувач може бути пов'язаний з прецедентом "Авторизація та видача призначень речей від приладом".
–	Інклюзії: Інклюзії використовуються для опису того, що один прецедент є частиною іншого. Наприклад, прецедент "Додавання та перегляд призначень речей" включає прецедент "Додавання та перегляд обладнання та речей охоронцем".
–	Розширення: Розширення використовуються для опису того, що один прецедент є розширенням іншого. Наприклад, прецедент "Зміна призначень речей користувачем" розширює прецедент "Додавання та перегляд призначень речей".

 
Рисунок 4.1 – Діаграма прецедентів серверної частини програмної системи

Задля розробки серверної частини даної системи обрав об'єктно-орієнтовну мову програмування C#, а також було використано технологію ASP.NET Core Web API. Дані технології дають змогу розробляти програми швидко та ефективно.
У даній системі PostgreSQL використовується як база даних, а серверні програми отримують доступ до бази даних за допомогою технології Entity Framework Core. Дану бібліотеку можна вважати зручною та сучасною, через те що вона забезпечує взаємодію з базою даних за допомогою об'єктно-орієнтованого підходу.
Надалі наведено діаграму розгортання, щоб більш детально зобразити використані технології серверної частини у даному проекті (див. рис. 3.1).
У системі було використано API контроллери для маршрутизації запитів. Контролери розбивають програму на логічні компоненти, де кожен несе відповідальність за обробку конкретних типів запитів, а також дій користувача. Це дозволяє зробити написання та тестування коду простим, а також швидко знаходити потрібні елементи програми.
З метою демонстрації та тестування API було використано такі інструменти як Postman та Swagger. Вони надають можливість для перегляду та тестування API, що значно покращує зручність розробки. Протокол HTTPS, забезпечує безпеку даних під час їх передачі, що робить захист даних та конфіденційність важливою складовою.
На рисунку 4.2 зображено діаграма розгортання для системи «Guardic».
Принцип REST API було використано для передачі та обміну даних.
У програмі присутнє хешування паролів. Також використовується модифікатор хеш-функції «сіль», який дозволяє різним користувачам з однаковими паролями мати різний хеш. Для генерації токенів було використано JWT (JSON Web Token). JWT надає можливість керувати доступом до програми лише авторизованим користувачам, а також забезпечує конфіденційність даних. 


 
Рисунок 4.2 – Діаграма розгортання для системи «Guardic»

Архітектуру серверного застосунку зобрежено на діаграмі пакетів (див. рис. 4.3).
Серверну частину застосунку було розроблено, використовуючи принцип трьох шарової архітектури. Вона вміщує в себе наступні частини: Core, Abstraction, Services та Controllers.


 
Рисунок 4.3 – Діаграма пакетів серверної частини програмної системи «Guardic»

У додатку Б наведено найважливіші частини коду, виходячи з цього, було обрано технології та архітектуру серверної частини програмної системи.


4.2 Архітектура ІоТ-частини


Клієнти — це користувачі, яким потрібен інвентар, наприклад речі. IoT-частина системи взаємодіє з цим типом користувачів. Пряма взаємодія з користувачем відбувається за допомогою екрана, який показує інформацію, а також комірки, через яку користувач може отримати необхідні речі. 
Діаграма прецедентів показує, як користувачі взаємодіють з Інтернетом речей як частиною системи (див. рис. 4.4).
 
Рисунок 4.4 – Діаграма прецедентів ІоТ частини програмної системи «Guardic»

Було вирішено використовувати програмний код мовою C#, щоб продемонструвати функціональні можливості IoT-частини системи. Цей код був оптимізований для відповідності апаратним обмеженням IoT-пристроїв завдяки компіляції в режимі Native AoT. Програма виводить дані за допомогою консольного інтерфейсу (CLI), а також використовує бібліотеку System.Net.Http.Headers для надсилання даних у форматі JSON. 
Було створено диекторію Entities, щоб спростити роботу з сутностями.
Крім того, для оптимізації програми для пристроїв з обмеженими ресурсами код програми був написаний з найменшою можливою кількістю рядків. Для того, щоб показати більш детально використані технології, було створено діаграму пакетів, як продемонстровано на рис. 4.5.
 
Рисунок 4.5 – Діаграма пакетів ІоТ частини програмної системи
На додаток до компоненту CLR.NET 8, який компілює код, мову програмування C# було обрано для розробки частини системи Internet of Things (IoT). Бібліотеку System.Net.Http.Headers можна використовувати для створення та відправлення HTTP-запитів, а бібліотеки System.Text.Json і Newtonsoft.Json можна використовувати для серіалізації та десеріалізації об’єктів. 


4.3 Специфікація REST


У цьому проєкті було використано REST API. Програмний інтерфейс містить 35 ендпоінтiв. Далі, у таблиці 4.1, детально наведено специфікацію кожного з 35 ендпоінтів. Ендпоінти несуть відповідальність за виконання бізнес логіки, а також вони надають користувачеві доступ до перегляду даних.
	Таблиця 4.1 – Специфікація REST
Назва	Метод	Шлях
GetMyAssignments	GET	/api/assignment/my
GetAssignmentById	GET	/api/assignment/my/{assignmentId}
UpdateAssignmentById	PUT	/api/assignment/my/{assignmentId}
DeleteAssignmentById	DELETE	/api/assignment/my/{assignmentId}
CreateAssignment	POST	/api/assignment
VerifyAssignment	POST	/api/assignment/verify
GetThings	GET	/api/Thing
CreateThing	POST	/api/Thing
TakeThingsByUserId	POST	/api/Thing/takeThings/{userId}
GetThingById	GET	/api/Thing/{thingId}
UpdateThingById	PUT	/api/Thing/{thingId}
DeleteThingById	DELETE	/api/Thing/{thingId}
GetUsers	GET	/api/User
GetUserById	GET	/api/User/{id}
CreateUser	POST	/api/User
LoginUser	POST	/api/User/Login
SignUpUser	POST	/api/User/Signup
UpdateUserById	PUT	/api/User/{id}
DeleteUserById	DELETE	/api/User/{id}
GetOrders	GET	/api/order
GetOrderById	GET	/api/order/{thingId}
CreateOrder	POST	/api/order
UpdateOrderById	PUT	/api/order/{thingId}
DeleteOrderById	DELETE	/api/order/{thingId}
GetNotifications	GET	/api/notification
GetNotificationById	GET	/api/notification/{notificationId}
UpdateNotificationById	PUT	/api/notification/{notificationId}
DeleteNotificationById	DELETE	/api/notification/{notificationId}
ReadNotificationById	POST	/api/notification/ReadNotification/{notificationId}
CreateGuard	POST	/api/Guard
GetGuards	GET	/api/Guard
UpdateGuardById	PUT	/api/Guard/{Id}
GetGuardById	GET	/api/Guard/{Id}
SignUpGuard	POST	/api/Guard/SignUp
LoginGuard	POST	/api/Guard/Login

За допомогою використання REST API користувачі мають змогу тестувати функціонал серверної частини програмної системи.
 
5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
5.1 Виклик і завантаження


Щоб запустити програум, потрібно завантажити архів з кодом програми та розахрівувати його. Крім того, оскільки програма використовує ядро PostgreSQL, необхідно встановити його найновішу версію з офіційного сайту продукту.
На рисунку 5.1 зображено загальний вигляд файлу appsettings.Development.json, у якому буде відбуватися підключення серверної частини застосунку до бази даних.
 
Рисунок 5.1 – Файл appsettings.Development.json

Щоб налаштувати зв’язок програми з базою даних, потрібно створити файл appsettings.Development.json за адресою «apz-pzpi-21-1-pakharenko-serhii-task2\API\appsettings.Development.json», а потім використовувати текстовий редактор, щоб написати вміст рядка, виділеного червоним на рисунку 5.2. Крім того, вам потрібно вказати ключ JWT, який буде використано для підписання токенів; він обведений синім кольором.

 
Рисунок 5.2 – Налаштування системи у файлі appsettings.Development.json

Для початку, перше завдання полягає в тому, щоб ініціювати серверний і клієнтський компоненти системи. Для цього можна використовувати JetBrains Rider, який можна отримати, відвідавши офіційний веб-сайт програмного забезпечення. Після цього наступний крок передбачає доступ до файлу Backend.sln, який знаходиться у папці «apz-pzpi-21-1-pakharenko-serhii-task2\BackEnd.sln», і виконання проекту в режимі без налагодження, натиснувши «CTRL + F5».
На рисунку 5.3 зображено загальний вигляд файлу appsettings.json, у якому буде відбуватися підключення серверної частини застосунку до бази даних.


 
Рисунок 5.3 – Файл appsettings.json

Щоб запустити компонент IoT, потрібно виконати той самий процес, що й запуск серверного компонента. Почнемо зі створення файлу appsettings.json із указаним шляхом «apz-pzpi-21-1-pakharenko-serhii-task2\API\appsettings.Development.json». Потім, використовуючи будь-яке програмне забезпечення для редагування тексту, введемо інформацію, виділену синім кольором на малюнку 5.4, яка визначає посилання на серверний компонент.
 
Рисунок 5.4 – Налаштування ІоТ-пристрою у файлі appsettings.json

За допомогою рядку ApiUrl буде відбуватись взаємодія між IoT пристроєм та сервером.


5.2 Призначення і логічна структура


Система "Guardic" складається з декількох модулів, кожен з яких відповідає за певний набір функцій:
1. Авторизація та реєстрація:
Цей модуль дозволяє користувачам входити в систему, реєструвати нові облікові записи та керувати своїми профілями. Він включає такі функції:
–	Вхід в систему за допомогою логіну та пароля.
–	Реєстрація нового облікового запису з зазначенням особистої інформації.
2. Управління обладнанням:
Цей модуль дозволяє користувачам переглядати, отримувати, повертати та відстежувати використання обладнання. Він включає такі функції:
–	Перегляд списку доступного обладнання.
–	Подача запитів на видачу обладнання.
–	Отримання та повернення обладнання.
–	Перегляд історії видачі та повернення обладнання.
3. Менеджмент:
Цей модуль дозволяє менеджерам схвалювати або відхиляти запити на видачу обладнання, а також відстежувати використання обладнання та роботу охоронців. Він включає такі функції:
–	Перегляд запитів на видачу обладнання.
–	Схвалення або відхилення запитів на видачу обладнання.
–	Перегляд історії видачі та повернення обладнання.
–	Створення звітів про використання обладнання.
4. Адміністрування:
Цей модуль дозволяє адміністраторам (охоронцям) керувати користувачами, обладнанням, налаштуваннями системи та даними. Він включає такі функції:
–	Створення та редагування користувачів.
–	Додавання, редагування та видалення обладнання.
–	Налаштування параметрів системи.
5. Інтеграція:
Цей модуль забезпечує інтеграцію системи "Guardic" з іншими системами, такими як GPS-трекери та IoT-пристрої. Він включає такі функції:
–	Підключення GPS-трекерів для відстеження місцезнаходження обладнання.
–	Збір даних з IoT-пристроїв, які використовуються для моніторингу призначення обладнання.


5.3 Опис програмної реалізації


	Для демонстрації роботи застосунку буде використано технології Postman та Swagger, також буде використано IDE JetBrains Rider для демонстрації коду, за потреби. Базу даних та зміни в ній буде продемонстровано у DataGrip.
Розпочнемо демострацію роботи застосунку з реєстрації звичайного користувача. На рисунку 5.5 зображено процес реєстрації нового користувача.
 
Рисунок 5.5 – Реєстрація нового користувча

	Далі зображено результат реєстрації нового користувача (рис. 5.6).
 
Рисунок 5.6 – Pезультат реєстрації нового користувача

У базі даних помічаємо зміни – з’явився новий користувач у системі, що можна побачити на рисунку 5.7.

 
Рисунок 5.7 – Pезультат реєстрації нового користувача у бaзі даних

	Далі потрібно авторизуватися. Введемо спеціально неправильні дані, щоб перевірити, що система видасть помилку. А саме, буде введено невірний пароль (рис 5.8). Як результат, система повідомляє про неправильне введення паролю або адреси елекронної пошти.
 
Рисунок 5.8 – Pезультат невдалої авторизації
Далі розглянемо випадок, коли користувач ввів правильні дані – свій логін та пароль. Було повернуто токен, який надалі будемо використовувати при авторизації. результат зображено на рисунку 5.10.

 
Рисунок 5.9 – Pезультат вдалої авторизації

Тепер розглянемо ендпоінт, який нам дає можливість отримати список усіх користувачів. Задля цього, по-перше, нам потрібно авторизуватися, тобто треба ввести токен який ми отримали у попередньому кроці, щоб ми мали доступ отримати список всіх користувачів. Дана операція продемонстрована на рисунку 5.10.
Рисунок 5.11 показує нам список користувачів які нам видав Postman. Як можна побачити, ми маємо трьох користувачів на даниц момент.
 
Рисунок 5.10 – Демонстрація введення токену

 
Рисунок 5.11 – Демонстрація списку користувачів
	Також одним із запитів, який хотілось продемонструвати є запит put. Цей запит дає змогу оновити дані користувача, тобто змінити пароль, адрес електронної пошти, або ім'я. Для демонстрації даного запиту було обрано користувача який має ID під номером 3. На рисунку 5.12 зображено запит. На рисунку 5.13 зображено результат запиту, тобто змінений адрес електронної пошти.
 
Рисунок 5.12 – Демонстрація запиту put для користувача


Що більше, на рисунку 5.13 зображено запит GetUserById. Даний запит нам інформацію про користувача із конкретним ID. В нашому випадку це з ID номер 3. Як видно, у даного користувача була змінена адреса електронної пошти.
Ще існує охоронець, який виконує роль адміністратора тобто цей користувач може давати дозвіл на використання речей. Охоронець може також створювати аккаунт, оновлювати свої дані видаляти акаунт переглядати інші акаунти. Приклади виконання запитів щодо охоронця Guard зображено на рисунках 5.14 - 5.16.
 
Рисунок 5.13 – Перегляд оновлених даних за допомогою запиту GetUserById 
 
Рисунок 5.14 – Реєстрація охоронця 
 
Рисунок 5.15 – Авторизація охоронця 

 
Рисунок 5.16 – Оновлений список охоронців 

Надалі буде розглянуто Thing, тобто річ інвентарю яка може бути видана або або звичайному робітнику. За речами також можна робити такі операції як створення, оновлення, видалення.
Це буде зображено на наступних рисунках (див. рис. 5.17-5.20).
 
Рисунок 5.17 – Створення речі

 
Рисунок 5.18 – Результат створення речі
 
Рисунок 5.19 – Видалення речі

 
Рисунок 5.20 – Результат видалення речі

	Рисунки продемонстрували створення та видалення речі за допомогою запитів.
Далі буде розглянуто розпорядження, тобто Order. Розпорядження показує, на який час можна взяти річ, час та дату видачі, а також те, як часто потрібно оновлювати дані щодо цієї речі. На рисунках 5.21-5.23 зображено деякі запити, такі як перегляд розпоряджень та їх створення.
 
Рисунок 5.21 – Перегляд розпоряджень

 
Рисунок 5.22 – Створення розпорядження
 
Рисунок 5.23 – Перегляд розпоряджень після додаваня нового розпорядження

Продемонструвавши вищезазначені дії, можливості взаємодії користувача з програмною системою були розглянуті.
Запис результатів тестування розробленої програми доступний за посиланням: https://youtu.be/_YVE011H74Q?si=as1LZaOWrmZHjeXQ (дата звернення: 24.06.2024)
 
ВИСНОВКИ


	Результатом виконання даної роботи є розроблнна прогрaмна сиcтема предметної області «Автоматизації видачі необхідного обладнання для охоронних підприємств».
На етапі розробки було проведено ретельний аналіз предметної області з подальшим проектуванням структури бази даних і розробкою серверної архітектури та IoT компонентів програмної системи. Через це, впровадження було здійснено за допомогою таких технологій, як ASP.NET Web API, EF Core, PostgreSQL, Postman та C#.
Завдяки вдосконаленій системі програмного забезпечення люди можуть ефективно контролювати обладнання, яке використовують охоронні компанії. Ця комплексна система пропонує такі функції, як реєстрація користувачів, авторизація та керування профілями. Користувачам надається доступ до перегляда персональної інформації та статистики. Стає можливим моніторинг обладнання в режимі реального часу, а також генерація сповіщень для сповіщення користувачів про будь-які зміни. Крім того, система містить компонент адміністрування, що дозволяє адміністраторам ефективно керувати користувачами, речами, розпорядженнями, налаштуваннями речей та розпорядженнь, що більше, створювати та завантажувати резервні копії даних.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	ASP and ASP.NET Tutorials. W3Schools. URL: https://www.w3schools.com/asp/default.ASP (дата звернення: 10.05.2024).
2.	C# language documentation. URL: https://learn.microsoft.com/en-us/dotnet/csharp/ (дата звернення: 15.05.2024)
2. 	ASP.NET documentation. URL: https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-8.0 (дата звернення: 15.05.2024)
4.	HTTP Semantics. URL: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6.1 (дата звернення: 14.06.2024)
5.	PostgreSQL 16.3 Documentation. PostgreSQL Documentation. URL:
https://www.postgresql.org/docs/current/ (дата звернення: 15.06.2024)
 
ДОДАТОК А
Результат перевірки на плагіат
 
Рисунок А.1 – Результат перевірки на плагіат
ДОДАТОК Б
Програмний код серверної частини
Вміст файлу Program.cs
1 using System.Text;
2 using API.Core.Contexts;
3 using API.Core.Entities;
4 using API.Core.Middlewares;
5 using API.Services.Abstractions;
6 using API.Services.Implementations;
7 using Microsoft.AspNetCore.Authentication.JwtBearer;
8 using Microsoft.EntityFrameworkCore;
9 using Microsoft.IdentityModel.Tokens;
10 using Microsoft.OpenApi.Models;
11 
12 var builder = WebApplication.CreateBuilder(args);
13 
14 builder.Services.AddControllers();
15 builder.Services.AddEndpointsApiExplorer();
16 builder.Services.AddSwaggerGen(c =>
17 {
18     c.SwaggerDoc("v1", new OpenApiInfo { Title = "Guardic Backend API", Version = "v1" });
19     
20     c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
21     {
22         Description = "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
23         Name = "Authorization",
24         In = ParameterLocation.Header,
25         Type = SecuritySchemeType.ApiKey
26     });
27 
28     c.AddSecurityRequirement(new OpenApiSecurityRequirement
29     {
30         {
31             new OpenApiSecurityScheme
32             {
33                 Reference = new OpenApiReference
34                 {
35                     Type = ReferenceType.SecurityScheme,
36                     Id = "Bearer"
37                 }
38             },
39             new string[] { }
40         }
41     });
42 });
43 
44 builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
45 {
46     options.TokenValidationParameters = new TokenValidationParameters
47     {
48         ValidateIssuerSigningKey = true,
49         ValidateLifetime = true,
50         ValidateIssuer = false,
51         ValidateAudience = false,
52         IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8
53             .GetBytes(builder.Configuration.GetSection("Authorization:JWT:Secret").Value)),
54     };
55 });
56 builder.Services.AddDbContext<GuardicDbContext>(options =>
57 {
58     options.UseNpgsql(builder.Configuration.GetConnectionString("Default"));
59 });
60 
61 builder.Services.AddSingleton<IJwtService, JwtService>();
62 builder.Services.Configure<JwtOptions>(builder.Configuration.GetSection("Jwt"));
63 
64 builder.Services.AddScoped<IUserService, UserService>();
65 builder.Services.AddScoped<IGuardService, GuardService>();
66 builder.Services.AddScoped<IThingService, ThingService>();
67 builder.Services.AddScoped<IAssignmentService, AssignmentService>();
68 builder.Services.AddScoped<IOrderService, OrderService>();
69 builder.Services.AddScoped<INotificationService, NotificationService>();
70 
71 var app = builder.Build();
72 
73 // Configure the HTTP request pipeline.
74 if (app.Environment.IsDevelopment())
75 {
76     app.UseSwagger();
77     app.UseSwaggerUI();
78 }
79 
80 app.UseHttpsRedirection();
81 app.UseAuthentication();
82 app.UseAuthorization();
83 
84 app.MapControllers();
85 
86 app.UseMiddleware<JwtMiddleware>();
87 
88 app.Run();

Вміст файлу OrderController
1 using API.Core.Attributes;
2 using API.Core.DTOs.Order;
3 using API.Services.Abstractions;
4 using Microsoft.AspNetCore.Authorization;
5 using Microsoft.AspNetCore.Mvc;
6 
7 namespace API.Controllers;
8 
9 [ApiController]
10 [Route("api/order")]
11 [GuardRoleInterceptor]
12 [Authorize]
13 public class OrderController(IOrderService orderService) : ControllerBase
14 {
15     [HttpGet]
16     public async Task<ActionResult<List<OrderDto>>> GetOrders()
17     {
18         var orders = await orderService.GetOrdersAsync();
19         return Ok(orders);
20     }
21 
22     [HttpGet("{thingId:int}")]
23     public async Task<ActionResult<OrderDto>> GetOrderById(int thingId)
24     {
25         var order = await orderService.GetOrderByIdAsync(thingId);
26 
27         if (order == null)
28             return NotFound();
29 
30         return Ok(order);
31     }
32 
33     [HttpPost]
34     public async Task<ActionResult<int>> AddOrder([FromBody] OrderCreateDto orderDto)
35     {
36         var addedOrderId = await orderService.AddOrderAsync(orderDto);
37         return Ok(addedOrderId);
38     }
39 
40     [HttpPut("{thingId:int}")]
41     public async Task<ActionResult<bool>> UpdateOrder(int thingId, [FromBody] OrderUpdateDto updatedOrderDto)
42     {
43         var result = await orderService.UpdateOrderAsync(thingId, updatedOrderDto);
44 
45         if (!result)
46             return NotFound();
47 
48         return Ok(result);
49     }
50 
51     [HttpDelete("{thingId:int}")]
52     public async Task<ActionResult<bool>> DeleteOrder(int thingId)
53     {
54         var result = await orderService.DeleteOrderAsync(thingId);
55 
56         if (!result)
57             return NotFound();
58 
59         return Ok(result);
60     }
61 }
62


 
ДОДАТОК В
Програмний код ІоТ пристрою
Вміст файлу Program.cs
1 using System.Net.Http.Headers;
2 using System.Text.Json;
3 using System.Text;
4 using IoT.Entities;
5 using Microsoft.Extensions.Configuration;
6 
7 ConfigurationBuilder builder = new ConfigurationBuilder();
8 builder.SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json", optional: false);
9 IConfiguration configBuilder = builder.Build();
10 Configuration configuration = new Configuration();
11 configBuilder.Bind(configuration);
12 
13 Greetings greetings = new Greetings();
14 greetings.GreetUser();
15 
16 using HttpClient client = new HttpClient();
17 var loginData = new
18 {
19     email = configuration.Credentials.Email,
20     password = configuration.Credentials.Password,
21 };
22 
23 StringContent loginContent = new StringContent(JsonSerializer.Serialize(loginData), Encoding.UTF8, "application/json");
24 var loginResponse = await client.PostAsync($"{configuration.ApiUrl}/User/login", loginContent);
25 
26 if (!loginResponse.IsSuccessStatusCode)
27 {
28     Console.WriteLine($"Error {loginResponse.StatusCode} - Impossible to login.");
29     return;
30 }
31 
32 var jwtToken = await loginResponse.Content.ReadAsStringAsync();
33 client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
34 
35 greetings.AskForIdCard();
36 
37 var userId = Convert.ToInt32(Console.ReadLine());
38 
39 greetings.CheckingUserExistence();
40 greetings.LoadingLine();
41 
42 try
43 {
44     var userResponse = await client.GetAsync($"{configuration.ApiUrl}/User/{userId}");
45 
46     if (!userResponse.IsSuccessStatusCode)
47     {
48         Console.WriteLine($"User not found! Error: {userResponse.StatusCode}");
49         return;
50     }
51     
52     var userResponseBody = await userResponse.Content.ReadAsStringAsync();
53     var user = JsonSerializer.Deserialize<User>(userResponseBody);
54 
55     Console.WriteLine($"Hello there, {user.fullname}!");
56     greetings.GettingInventoryMessage();
57     greetings.LoadingLine();
58     
59     var response = await client.PostAsync($"{configuration.ApiUrl}/Thing/takeThings/{userId}", null);
60     
61     if (!response.IsSuccessStatusCode)
62     {
63         Console.WriteLine($"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
64         return;
65     }
66 
67     var responseBody = await response.Content.ReadAsStringAsync();
68     var orders = JsonSerializer.Deserialize<AssignedThings>(responseBody)!.assignedThingDtos;
69     
70     greetings.ShowSuccessMessage();
71     
72     foreach (var order in orders)
73     {
74         Console.WriteLine($"Assignment ID: {order.assignmentId}" +
75                           $"Order: {order.orderId}" +
76                           $"Amount: {order.amount}" +
77                           $"Frequency: {order.frequency}" +
78                           $"You can keep thing for: {order.duration}" +
79                           $"Date assigned: {order.dateAssignedUTC}");
80         greetings.LoadingLine();
81     }
82     greetings.LoadingLine();
83 }
84 catch (Exception ex)
85 {
86     Console.WriteLine($"Some exception occured: {ex.Message}");
87 }

